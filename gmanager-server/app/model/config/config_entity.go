// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package config

import (
	"database/sql"
	"github.com/gogf/gf/v2/database/gdb"
)

// Entity is the golang structure for table sys_config.
type Entity struct {
	Id           int    `orm:"id,primary"    json:"id"`           // 主键
	Name         string `orm:"name"          json:"name"`         // 名称
	Key          string `orm:"key"           json:"key"`          // 键
	Value        string `orm:"value"         json:"value"`        // 值
	Code         string `orm:"code"          json:"code"`         // 编码
	DataType     int    `orm:"data_type"     json:"dataType"`     // 数据类型//radio/1,KV,2,字典,3,数组
	ParentId     int    `orm:"parent_id"     json:"parentId"`     // 类型
	ParentKey    string `orm:"parent_key"    json:"parentKey"`    //
	Sort         int    `orm:"sort"          json:"sort"`         // 排序号
	ProjectId    int    `orm:"project_id"    json:"projectId"`    // 项目ID
	CopyStatus   int    `orm:"copy_status"   json:"copyStatus"`   // 拷贝状态 1 拷贝  2  不拷贝
	ChangeStatus int    `orm:"change_status" json:"changeStatus"` // 1 不可更改 2 可以更改
	Enable       int    `orm:"enable"        json:"enable"`       // 是否启用//radio/1,启用,2,禁用
	UpdateTime   string `orm:"update_time" json:"updateTime"`     // 更新时间
	UpdateId     int    `orm:"update_id"   json:"updateId"`       // 更新人
	CreateTime   string `orm:"create_time" json:"createTime"`     // 创建时间
	CreateId     int    `orm:"create_id"   json:"createId"`       // 创建者

	UpdateName string `json:"updateName,omitempty" gconv:"updateName,omitempty"`
	CreateName string `json:"createName,omitempty" gconv:"createName,omitempty"`
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
